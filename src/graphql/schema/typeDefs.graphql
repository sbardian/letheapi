type Item {
  id: String!
  title: String!
  creator: String!
  list: String!
}

type User {
  id: String!
  username: String!
  email: String!
  lists: [List]
  invitations: [Invitation]
}

type List {
  id: String
  title: String
  owner: String
  users: [User]
  items: [Item]
  invitations: [Invitation]
}

type Invitation {
  id: String
  inviter: String
  invitee: String
  list: String
  title: String
}

type AuthResponse {
  token: String!
}

type getListUsers {
  users: [User]
}

type getUserLists {
  lists: [List]
}

input LoginInput {
  username: String!
  password: String!
}

input SignupInput {
  username: String!
  email: String!
  password: String!
}

input NewList {
  title: String!
}

input NewItem {
  title: String!
  list: String!
}

type Mutation {
  login(loginInput: LoginInput!): AuthResponse
  signup(signupInput: SignupInput!): AuthResponse
  createNewItem(ItemInfo: NewItem!): Item!
  createNewList(ListInfo: NewList!): List!
  deleteItem(itemId: String!): Item!
  deleteList(listId: String!): List!
  createInvitation(
    listId: String!
    invitee: String!
    title: String!
  ): Invitation
  deleteInvitation(invitationId: String!): Invitation
  declineInvitation(invitationId: String!): Invitation
  acceptInvitation(invitationId: String!): Invitation
  removeFromList(listId: String!, userId: String): User
  updateList(listId: String!, title: String!): List
  updateItem(itemId: String!, title: String!): Item
}

type Query {
  # Gets the current users information
  getMyInfo: User
  # Administrators only
  getUser(userId: String!): User
  # Administrators only
  getUsers: [User]
  # Returns a users lists or a users specifc list based on title or id
  getLists(
    # userId is an Administrator only argument
    userId: String
    limit: Int
    contains_title: String
    id_is: String
  ): [List]
}
